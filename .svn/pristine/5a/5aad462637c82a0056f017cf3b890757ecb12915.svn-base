package com.telecom.action.app;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.struts2.convention.annotation.ParentPackage;

import com.opensymphony.oscache.util.StringUtil;
import com.telecom.entity.Route;
import com.telecom.entity.RouteCreatorRecord;
import com.telecom.entity.RouteEntrantsRecord;
import com.telecom.entity.TowerUser;
import com.telecom.service.RouteCreatorRecordService;
import com.telecom.service.RouteEntrantsRecordService;
import com.telecom.service.RouteService;
import com.telecom.service.TowerUserService;
import com.telecom.util.JsonUtil;

@ParentPackage("app")
public class RouteAction extends BaseAppAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6588944346702629607L;

	@Resource(name = "routeServiceImpl")
	private RouteService routeService;

	@Resource(name = "towerUserServiceImpl")
	private TowerUserService towerUserService;

	@Resource(name = "routeCreatorRecordServiceImpl")
	private RouteCreatorRecordService routeCreatorRecordService;

	@Resource(name = "routeEntrantsRecordServiceImpl")
	private RouteEntrantsRecordService routeEntrantsRecordService;

	private File FileData;// 照片文件
	private String FileDataFileName;// 照片名称

	private String routeId;// 路线id
	private String routeCreator;// 路线发起者手机号
	private String routeEntrants;// 路线参与者
	private String routeCreatorRecordId;// 路线创建记录
	private String scenicSpotId;// 景点id
	private String latitude;// 景点id
	private String longitude;// 景点id

	/**
	 * 获取路线
	 * 
	 * @author George
	 * @throws Exception
	 */
	public String getroute() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<Route> routeList = routeService.getAllList();
		if (routeList != null && routeList.size() != 0) {
			map.put("status", "true");
			map.put("routeList", routeList);
			map.put("msg", "获取成功");
		} else {
			map.put("status", "false");
			map.put("msg", "获取失败");
		}
		return output(JsonUtil.toJson(map));
	}

	/**
	 * 查看路线详情(非必须)
	 * 
	 * @param routeId
	 *            :路线id
	 * @author George
	 * @throws Exception
	 */

	public String getroute_detail() {
		Map<String, Object> map = new HashMap<String, Object>();
		if (routeId != null) {
			map.put("status", "true");
			map.put("scenicSpotList", routeService.getScenicSpotList(routeId));
			map.put("msg", "获取成功");
		} else {
			map.put("status", "false");
			map.put("msg", "获取失败");
		}
		return output(JsonUtil.toJson(map));
	}

	/**
	 * 发起路线
	 * 
	 * @param routeId
	 *            :路线id
	 * @param routeCreator
	 *            :创建者/电话
	 * @author George
	 * @throws Exception
	 */
	public String create_route() {
		Map<String, Object> map = new HashMap<String, Object>();
		if (routeId != null && routeCreator != null) {
			String towerUserId = towerUserService
					.getTowerUserIdByPhone(routeCreator);
			if (StringUtil.isEmpty(towerUserId)) {
				TowerUser tU = new TowerUser();
				tU.setPhone(routeCreator);
				towerUserService.save(tU);
			}
			RouteCreatorRecord rcr = new RouteCreatorRecord();
			rcr.setRoute(routeId);
			rcr.setRouteCreator(towerUserService
					.getTowerUserIdByPhone(routeCreator));
			rcr.setStatus("0");
			routeCreatorRecordService.save(rcr);
			map.put("status", "true");
			map.put("routeCreatorRecordId", rcr.getId());
			// map.put("scenicSpotList",
			// routeService.getScenicSpotList(routeId));
			map.put("msg", "发起成功");
		} else {
			map.put("status", "false");
			map.put("msg", "发起失败");
		}
		return output(JsonUtil.toJson(map));
	}

	/**
	 * 参与路线
	 * 
	 * @param routeCreatorRecordId
	 *            :路线创建记录id
	 * @param routeEntrants
	 *            :路线参与者
	 * @author George
	 * @throws Exception
	 */
	public String entrants_route() {
		Map<String, Object> map = new HashMap<String, Object>();
		if (!StringUtil.isEmpty(routeCreatorRecordId)) {
			map.put("scenicSpotList",
					routeService.getEntrantsRouteList(routeCreatorRecordId));
			map.put("status", "true");
			map.put("msg", "获取成功");
		} else {
			map.put("status", "false");
			map.put("msg", "获取失败");
		}
		return output(JsonUtil.toJson(map));
	}

	/**
	 * 拍照图片
	 * 
	 * @param routeCreatorRecordId
	 *            :路线创建记录id
	 * @param routeEntrants
	 *            :路线参与者
	 * @param scenicSpotId
	 *            :景点id
	 * @param latitude
	 *            :纬度
	 * @param longitude
	 *            :经度
	 * @param FileData
	 *            文件
	 * @param FileDataFileName
	 *            文件名称
	 * @author George
	 * @throws Exception
	 */
	public String img_upload() {
		Map<String, Object> map = new HashMap<String, Object>();
		if (!StringUtil.isEmpty(routeCreatorRecordId)
				&& !StringUtil.isEmpty(routeEntrants)
				&& !StringUtil.isEmpty(scenicSpotId)
				&& !StringUtil.isEmpty(latitude)
				&& !StringUtil.isEmpty(longitude)) {
			if (routeService.regionBoolean(scenicSpotId, latitude, longitude)) {
				System.out.println("RouteAction---" + FileDataFileName + "---"
						+ routeCreatorRecordId);
				try {
					if (FileData == null) {
						System.out.println("照片上传失败");
						map.put("status", "false");
						map.put("msg", "照片上传失败");
						return output(JsonUtil.toJson(map));
					}
					String uploadFileName = FileOperateUtil.copyFile(
							getServletContext(), FileData, FileDataFileName);
					String img_url = "upload/img/" + uploadFileName;
					if (routeService.isUploadRepeat(routeCreatorRecordId,
							routeEntrants)) {
						RouteEntrantsRecord rer = new RouteEntrantsRecord();
						rer.setImgUrl(img_url);
						rer.setRouteCreatorRecord(routeCreatorRecordId);
						rer.setRouteEntrants(routeEntrants);
						rer.setScenicSpot(scenicSpotId);
						routeEntrantsRecordService.save(rer);
						map.put("status", "true");
						map.put("msg", "照片上传成功");
						return output(JsonUtil.toJson(map));
					} else {
						map.put("status", "false");
						map.put("msg", "照片重复");
					}
				} catch (Exception e) {
					map.put("status", "false");
					map.put("msg", "照片上传失败");
					e.printStackTrace();
				}
			} else {
				map.put("status", "false");
				map.put("msg", "不在景点范围内");
			}

		} else {
			map.put("status", "false");
			map.put("msg", "获取失败");
		}
		map.put("DESC", "距离景点不得超过1000米");
		return output(JsonUtil.toJson(map));
	}

	public String getRouteId() {
		return routeId;
	}

	public void setRouteId(String routeId) {
		this.routeId = routeId;
	}

	public String getRouteCreator() {
		return routeCreator;
	}

	public void setRouteCreator(String routeCreator) {
		this.routeCreator = routeCreator;
	}

	public String getRouteEntrants() {
		return routeEntrants;
	}

	public void setRouteEntrants(String routeEntrants) {
		this.routeEntrants = routeEntrants;
	}

	public String getRouteCreatorRecordId() {
		return routeCreatorRecordId;
	}

	public void setRouteCreatorRecordId(String routeCreatorRecordId) {
		this.routeCreatorRecordId = routeCreatorRecordId;
	}

	public String getScenicSpotId() {
		return scenicSpotId;
	}

	public void setScenicSpotId(String scenicSpotId) {
		this.scenicSpotId = scenicSpotId;
	}

	public String getLatitude() {
		return latitude;
	}

	public void setLatitude(String latitude) {
		this.latitude = latitude;
	}

	public String getLongitude() {
		return longitude;
	}

	public void setLongitude(String longitude) {
		this.longitude = longitude;
	}
}
