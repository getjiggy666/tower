<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
       default-lazy-init="true">

	<aop:config />
	<context:component-scan base-package="com.telecom" />
	<context:property-placeholder location="classpath*:/database.properties"/>
	
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	    <property name="poolName" value="springHikariCP" />
	    <property name="connectionTestQuery" value="${pool.connectionTestQuery}" />
	    <property name="dataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" />
	    <property name="connectionTimeout" value="${pool.connectionTimeout}" />  
		<property name="idleTimeout" value="${pool.idleTimeout}" />  
		<property name="maxLifetime" value="${pool.maxLifetime}" />  
		<property name="minimumIdle" value="${pool.minimumIdle}" />   
		<property name="maximumPoolSize" value="${pool.maximumPoolSize}" /> 
	    <property name="dataSourceProperties">
	        <props>
	            <prop key="url">${jdbc.url}</prop>
	            <prop key="user">${jdbc.username}</prop>
	            <prop key="password">${jdbc.password}</prop>
				<prop key="cachePrepStmts">${pool.cachePrepStmts}</prop>
				<prop key="prepStmtCacheSize">${pool.prepStmtCacheSize}</prop>
				<prop key="prepStmtCacheSqlLimit">${pool.prepStmtCacheSqlLimit}</prop>  
				<prop key="useServerPrepStmts">${pool.useServerPrepStmts}</prop>    
	        </props>
	    </property>
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	    <constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="databaseNamingStrategy" class="com.telecom.common.DatabaseNamingStrategy">
		<property name="tablePrefix" value="${namingStrategy.tablePrefix}" />
		<property name="isAddUnderscores" value="${namingStrategy.isAddUnderscores}" />
		<property name="maxLength" value="${namingStrategy.maxLength}" />
    </bean>
    
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="entityInterceptor" ref="entityInterceptor" />
		<property name="eventListeners">
			<map>
				<entry key="post-commit-insert">
					<ref bean="entityPostInsertEventListener" />
				</entry>
				<entry key="post-update">
					<ref bean="entityPostUpdateEventListener" />
				</entry>
				<entry key="post-delete">
					<ref bean="entityPostDeleteEventListener" />
				</entry>
			</map>
		</property>
		<property name="namingStrategy" ref="databaseNamingStrategy" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop>
				<prop key="hibernate.search.default.indexBase">${java.io.tmpdir}/demoproject/index</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.telecom.entity" />
	</bean>
	
	<bean id="springUtil" class="com.telecom.util.SpringUtil" lazy-init="false" />
    
	<bean id="freemarkerManager" class="com.telecom.common.FreemarkerManager" />
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean id="captchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="com.telecom.common.CaptchaEngine" />
		</property>
		<property name="minGuarantedStorageDelayInSeconds" value="600" />
	</bean>
	
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.timeout">25000</prop>
				<!--
				<prop key="mail.smtp.starttls.enable">true</prop>  
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				-->
			</props>
		</property>
	</bean>
	
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="50" />
		<property name="queueCapacity" value="1000" />
		<property name="keepAliveSeconds" value="60" />
	</bean>
	
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />
	
	<bean id="txProxyTemplate" abstract="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<bean id="quartzHtmlServiceImpl" parent="txProxyTemplate">
		<property name="target" ref="htmlServiceImpl" />
	</bean>

</beans>